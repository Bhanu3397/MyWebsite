One of the core purposes of the SQL language is to retrieve information stored in a database. This is commonly referred to as querying.
Queries allow us to communicate with the database by asking questions and returning a result set with data relevant to the question.

Select:-Suppose we are only interested in two of the columns. We can select individual columns by their names (separated by a comma):
SELECT column1, column2 
FROM table_name;

As:-AS is a keyword in SQL that allows you to rename a column or table using an alias.
The new name can be anything you want as long as you put it inside of single quotes.
SELECT name AS 'Titles'
FROM movies;
Some important things to note:
Although it’s not always necessary, it’s best practice to surround your aliases with single quotes.
When using AS, the columns are not being renamed in the table. The aliases only appear in the result.
SELECT name,imdb_rating AS 'Movie Name', 'IMDB'
FROM movies;

Distinct:-When we are examining data in a table, it can be helpful to know what distinct values exist in a particular column.
DISTINCT is used to return unique values in the output. It filters out all duplicate values in the specified column(s).

Where:-We can restrict our query results using the WHERE clause in order to obtain only the information we want.
Comparison operators used with the WHERE clause are:
= equal to
!= not equal to
> greater than
< less than
>= greater than or equal to
<= less than or equal to
There are also some special operators that we will learn more about in the upcoming exercises.

Like I:-LIKE can be a useful operator when you want to compare similar values.
SELECT * 
FROM movies
WHERE name LIKE 'Se_en';
LIKE is a special operator used with the WHERE clause to search for a specific pattern in a column.
Like II:-The percentage sign % is another wildcard character that can be used with LIKE.
% is a wildcard character that matches zero or more missing letters in the pattern.
A% matches all movies with names that begin with letter ‘A’
%a matches all movies that end with ‘a’
We can also use % both before and after a pattern:
SELECT * 
FROM movies 
WHERE name LIKE '%man%'; (selects all movies that contains man in the name)
SELECT * 
FROM movies
WHERE name LIKE 'The %'; (selects all movies starts with "The")

Is Null:-Unknown values are indicated by NULL.
It is not possible to test for NULL values with comparison operators, such as = and !=.
Instead, we will have to use these operators:
IS NULL
IS NOT NULL

Between:-The BETWEEN operator is used in a WHERE clause to filter the result set within a certain range.
It accepts two values that are either numbers, text or dates.
select * from movies where name between 'D' and 'G'; (excludes G like for loop rnge in python only for text) 
For example, this statement filters the result set to only include movies with years from 1990 up to, and including 1999.
SELECT *
FROM movies
WHERE year BETWEEN 1990 AND 1999;

And:-Sometimes we want to combine multiple conditions in a WHERE clause to make the result set more specific and useful.
One way of doing this is to use the AND operator. Here, we use the AND operator to only return 90’s romance movies.
SELECT * FROM movies
WHERE year BETWEEN 1990 AND 1999
   AND genre = 'romance';
With AND, both conditions must be true for the row to be included in the result.
select * from movies where year < 1985 and genre ='horror';

Or:-Similar to AND, the OR operator can also be used to combine multiple conditions in WHERE, but there is a fundamental difference:
AND operator displays a row if all the conditions are true.
OR operator displays a row if any condition is true.

Order By:-It is often useful to list the data in our result set in a particular order.
We can sort the results using ORDER BY, either alphabetically or numerically. 
DESC is a keyword used in ORDER BY to sort the results in descending order (high to low or Z-A).
ASC is a keyword used in ORDER BY to sort the results in ascending order (low to high or A-Z).
SELECT name, year FROM movies ORDER BY name;
SELECT name, year, imdb_rating FROM movies ORDER BY imdb_rating desc;

Limit:-LIMIT is a clause that lets you specify the maximum number of rows the result set will have.
select * from movies order by imdb_rating desc limit 3; (limits result to only 3 movies)

Case:-A CASE statement allows us to create different outputs (usually in the SELECT statement). 
It is SQL’s way of handling if-then logic.
Each WHEN tests a condition and the following THEN gives us the string if the condition is true.
The ELSE gives us the string if all the above conditions are false.
The CASE statement must end with END.
SELECT name,
 CASE
  WHEN genre = 'romance' THEN 'Chill'
  WHEN genre = 'comedy'  THEN 'Chill'
  ELSE 'Intense'
 END AS 'Mood'
FROM movies;

Questions:-
SELECT * 
FROM sports 
WHERE name LIKE '%ball';
Ans:-It matches all sports that end with ‘ball’.

How would you query all the unique genres from the books table?
SELECT DISTINCT genres
FROM books;