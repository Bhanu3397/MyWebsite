Create a Table:- The <table> element will contain all of the tabular data we plan on displaying. <Table> </Table>
Table Rows:- In many programs that use tables, the table is already predefined for you, meaning that it contains the rows, columns, and cells that will hold data. In HTML, all of these components must be created.
Table Data:-
Rows aren’t sufficient to add data to a table. Each cell element must also be defined. In HTML, you can add data using the table data element: <td>.
Table Headings:-
Table data doesn’t make much sense without titles to describe what the data represents.
To add titles to rows and columns, you can use the table heading element: <th>.

Spanning Columns:- Data can span columns using the colspan attribute. The attributes accepts an integer (greater than or equal to 1) to denote the number of columns it spans across.

Spanning Rows:- Data can also span multiple rows using the rowspan attribute.

Forms:- syntaxt "<form action=""></form>"
Example:- value="Default-value" we can set up value for Default-value. 
<form action="/example.html" method="POST">
    <input type="text" name="first-text-field">
</form>
Adding a Label:- 
<form action="/example.html" method="POST">
    <label for="meal">What do you want to eat?</label>
    <br>
    <input type="text" name="food" id="meal">
  </form>

  Text Input:-
  The <input> element has a type attribute which determines how it renders on the web page and what kind of data it can accept.
  Example:-
  <form action="/example.html" method="POST">
    <input type="text" name="first-text-field">
  </form>

Adding a Label:-clicking the <label> element focuses the field of the <input> element.
  The <label> element has an opening and closing tag and displays text that is written between the opening and closing tags. To associate a <label> and an <input>, the <input> needs an id attribute. We then assign the for attribute of the <label> element with the value of the id attribute of <input>, like so:
    <form action="/example.html" method="POST">
        <label for="meal">What do you want to eat?</label>
        <br>
        <input type="text" name="food" id="meal">
      </form>

Password Input:-
Think about all those times we have to put sensitive information, like a password or PIN, into a <form>. We wouldn’t want our information to be seen by anyone peeking over our shoulder! Luckily, we have the type="password" attribute for <input>!
    <form>
        <label for="user-password">Password: </label>
        <input type="password" id="user-password" name="user-password">
      </form>

Number Input:-we might want our users to type in a number — in which case we can set the type attribute to… (you guessed it)… "number"!
<form>
    <label for="years"> Years of experience: </label>
    <input id="years" name="years" type="number" step="1">
  </form>

Range Input:- 
Using an <input type="number"> is great if we want to allow users to type in any number of their choosing. But, if we wanted to limit what numbers our users could type we might consider using a different type value. Another option we could use is setting type to "range" which creates a slider.
<form>
    <label for="volume"> Volume Control</label>
    <input id="volume" name="volume" type="range" min="0" max="100" step="1">
  </form>

Checkbox Input:-
allow them to select any number of options? Sounds like we could use checkboxes! In a <form> we would use the <input> element and set type="checkbox".
    <form>
        <p>Choose your pizza toppings:</p>
        <label for="cheese">Extra cheese</label>
        <input id="cheese" name="topping" type="checkbox" value="cheese">
        <br>
        <label for="pepperoni">Pepperoni</label>
        <input id="pepperoni" name="topping" type="checkbox" value="pepperoni">
        <br>
        <label for="anchovy">Anchovy</label>
        <input id="anchovy" name="topping" type="checkbox" value="anchovy">
      </form>

Radio Button Input:- You can select multiple checkboxes, but only one radio button.
<form>
    <p>What is sum of 1 + 1?</p>
    <input type="radio" id="two" name="answer" value="2">
    <label for="two">2</label>
    <br>
    <input type="radio" id="eleven" name="answer" value="11">
    <label for="eleven">11</label>
  </form>

Dropdown list:-An alternative solution is to use a dropdown list to allow our users to choose one option from an organized list
<form>
    <label for="lunch">What's for lunch?</label>
    <select id="lunch" name="lunch">
      <option value="pizza">Pizza</option>
      <option value="curry">Curry</option>
      <option value="salad">Salad</option>
      <option value="ramen">Ramen</option>
      <option value="tacos">Tacos</option>
    </select>
  </form>

Datalist Input:- The <datalist> is used with an <input type="text"> element. The <input> creates a text field that users can type into and filter options from the <datalist>.
<form>
    <label for="city">Ideal city to visit?</label>
    <input type="text" list="cities" id="city" name="city">
  
    <datalist id="cities">
      <option value="New York City"></option>
      <option value="Tokyo"></option>
      <option value="Barcelona"></option>
      <option value="Mexico City"></option>
      <option value="Melbourne"></option>
      <option value="Other"></option>  
    </datalist>
  </form>

Textarea element:-
There are cases where users need to write in more information, like a blog post. In such cases, instead of using an <input>, we could use <textarea>.
The <textarea> element is used to create a bigger text field for users to write more text. We can add the attributes rows and cols to determine the amount of rows and columns for the <textarea>.
    <form>
        <label for="blog">New Blog Post: </label>
        <br>
        <textarea id="blog" name="blog" rows="5" cols="30">
        </textarea>
      </form>

Submit Form:- To make a submit button in a <form>, we’re going to use the reliable <input> element and set the type to "submit".
    <form>
        <input type="submit" value="Send">
      </form>

FORM VALIDATION:-
Requiring an Input:-
Sometimes we have fields in our <form>s which are not optional, i.e. there must be information provided before we can submit it. To enforce this rule, we can add the required attribute to an <input> element.
    <form action="submission.html" method="GET">
        <!--Add the minlength and maxlength attributes to the input fields-->
        <label for="username">Username:</label>
        <br>
        <input id="username" name="username" type="text" required minlength ="3" maxlength="15">
        <br>
        <label for="pw">Password:</label>
        <br>
        <input id="pw" name="pw" type="password" required minlength="8" maxlength="15">
        <br>
        <input type="submit" value="Submit">
      </form>
      Let’s quickly recap:

Client-side validation takes place in the browser before it goes to any server.
Client-side validations happen in the browser before information is sent to a server.
Adding the required attribute to an input related element will validate that the input field has information in it.
Assigning a value to the min attribute of a number input element will validate an acceptable minimum value.
Assigning a value to the max attribute of a number input element will validate an acceptable maximum value.
Assigning a value to the minlength attribute of a text input element will validate an acceptable minimum number of characters.
Assigning a value to the maxlength attribute of a text input element will validate an acceptable maximum number of characters.
Assigning a regex to pattern matches the input to the provided regex.
If validations on a <form> do not pass, the user gets a message explaining why and the <form> cannot be submitted.

