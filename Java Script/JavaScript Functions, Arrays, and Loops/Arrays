Arrays:-
Organizing and storing data is a foundational concept of programming.

One way we organize data in real life is by making lists. Let’s make one here:
New Year's Resolutions:
1. Keep a journal 
2. Take a falconry class
3. Learn to juggle

Let’s now write this list in JavaScript, as an array:
let newYearsResolutions = ['Keep a journal', 'Take a falconry class', 'Learn to juggle'];

Arrays can store any data types (including strings, numbers, and booleans). Like lists, arrays are ordered, meaning each item has a numbered position.

Accessing Elements:-
Each element in an array has a numbered position known as its index. We can access individual items using their index, which is similar to referencing an item in a list based on the item’s position.
Arrays in JavaScript are zero-indexed, meaning the positions start counting from 0 rather than 1. Therefore, the first item in an array will be at position 0

But what happens if you try to access an index that is beyond the last element?
You get Undefined in JavaScript

Update Elements:-
let groceryList = ['bread', 'tomatoes', 'milk'];
groceryList[1]='avocados'
console.log(groceryList) //[ 'bread', 'avocados', 'milk' ]

Arrays with let and const:-
Variables declared with let can be reassigned.
Variables declared with the const keyword cannot be reassigned. However, elements in an array declared with const remain mutable.
The .length property:-
One of an array’s built-in properties is length and it returns the number of items in the array. We access the .length property just like we do with strings. Check the example below:
const newYearsResolutions = ['Keep a journal', 'Take a falconry class'];
console.log(newYearsResolutions.length); // 2

const objectives = ['Learn a new languages', 'Read 52 books', 'Run a marathon'];
console.log(objectives.length) //3

The .push() Method:-
One method, .push() allows us to add items to the end of an array. 

const itemTracker = ['item 0', 'item 1', 'item 2'];
itemTracker.push('item 3', 'item 4');
console.log(itemTracker); 
// Output: ['item 0', 'item 1', 'item 2', 'item 3', 'item 4'];

The .pop() Method
Another array method, .pop(), removes the last item of an array.
const chores = ['wash dishes', 'do laundry', 'take out trash', 'cook dinner', 'mop floor'];
chores.pop()
console.log(chores)

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array for more methods

Arrays and Functions:-

const concept = ['arrays', 'can', 'be', 'mutated'];
function changeArr(arr){
  arr[3] = 'MUTATED';
}
changeArr(concept);
console.log(concept)
//[ 'arrays', 'can', 'be', 'MUTATED' ]
function removeElement(newArr){
  newArr.pop()
}
removeElement(concept)
console.log(concept)
//[ 'arrays', 'can', 'be' ]

Nested Arrays:-
Earlier we mentioned that arrays can store other arrays. When an array contains another array it is known as a nested array.
const nestedArr = [[1], [2, 3]];
let numberClusters = [[1,2],[3,4],[5,6]]
const target = numberClusters[2][1]
console.log(target) //6

we can access nested arrays by using index of the nested elements and index of element within the nested Elements
